<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!--
    Vehicle's parameters (remember to enter the model parameters below)
  -->

  <xacro:property name="mass" value="28"/>
  <!-- Center of gravity -->
  <xacro:property name="cog" value="0 0 -0.13"/>
  <!-- Fluid density -->
  <xacro:property name="rho" value="1028"/>

  <!-- Loading vehicle's specific macros -->
  <!-- TODO -->
  <xacro:include filename="$(find heron_description)/urdf/snippets.xacro"/>

  <material name="gray"><color rgba="0.7 0.7 0.7 1.0"/></material>
  <material name="dark_gray"><color rgba="0.2 0.2 0.2 1.0"/></material>
  <material name="yellow"><color rgba="0.8 0.8 0.0 1.0"/></material>

  <xacro:macro name="panel" params="namespace side location">


      <!-- location flips the panel. 1 is for the left and -1 is for the right -->
      <joint name="${namespace}base_${side}_joint" type="fixed">
        <origin xyz="0.0 ${location * 0.34495} 0.04959" rpy="0 0 0" />
        <parent link="${namespace}base_link" />
        <child link="${namespace}${side}_panel_link" />
      </joint>

      <link name="${namespace}${side}_panel_link">
        <inertial>
          <mass value="0.1" />
          <origin xyz="0.00000000 0.00000000 0.00000000" />
          <inertia ixx="0.01" ixy="0.00" ixz="0.00"
            iyy="0.01" iyz="0.00" izz="0.01" />
        </inertial>

        <visual>
          <origin xyz="0 0 0" rpy="0 0 0" />
          <geometry>
            <mesh filename="package://heron_description/meshes/${side}_panel.stl" />
          </geometry>
          <material name="yellow" />
        </visual>
      </link>

      <gazebo reference="${namespace}${side}_panel_link">
        <material>Gazebo/Yellow</material>
      </gazebo>
    </xacro:macro>

  <!-- Vehicle macro -->
  <xacro:macro name="heron_base" params="namespace *gazebo">


      <!-- Rigid body description of the base link -->
      <link name="${namespace}base_link">
        <!--
          Be careful to setup the coefficients for the inertial tensor,
          otherwise your model will become unstable on Gazebo
        -->

        <visual>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <mesh filename="package://heron_description/meshes/heron_base.stl" scale="1 1 1" />
          </geometry>
          <material name="dark_gray" />
        </visual>

        <collision>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <mesh filename="package://heron_description/meshes/heron_collision.stl" scale="1 1 1" />
          </geometry>
        </collision>
      </link>

      <!-- Dummy Link to contain the inertial information for base_link -->
      <link name="${namespace}dummy_link">
        <inertial>
          <mass value="${mass}" />
          <origin xyz="${cog}" rpy="0 0 0"/>
          <inertia ixx="10" ixy="0" iyy = "10" ixz="0" iyz="0" izz="10" />
          <!-- <inertia ixx="0.017474" ixy="-0.000013" ixz="-0.000102"
                                  iyy="0.017781"  iyz="-0.000058"
                                                  izz="0.033235" /> -->

        </inertial>
      </link>

      <joint name="dummy_to_base" type="fixed">
        <parent link="${namespace}base_link" />
        <child link="${namespace}dummy_link" />
      </joint>

    <gazebo reference="${namespace}base_link">
      <selfCollide>false</selfCollide>
      <material>Gazebo/DarkGrey</material>
      <gravity>1</gravity>
    </gazebo>

    <!-- Set up hydrodynamic plugin given as input parameter -->
    <xacro:insert_block name="gazebo"/>

    <!-- Include the thruster modules -->
    <xacro:thruster_macro robot_namespace="$(arg namespace)" suffix_ns="$(arg suffix_ns)" thruster_id="0"
      simulation="$(arg simulation)">
      <!-- Right Thruster -->
      <origin xyz="-0.53 -0.377654 -0.16" rpy="0 0 0" />
    </xacro:thruster_macro>
    <xacro:thruster_macro robot_namespace="$(arg namespace)" suffix_ns="$(arg suffix_ns)" thruster_id="1"
      simulation="$(arg simulation)">
      <!-- Left Thruster -->
      <origin xyz="-0.53 0.377654 -0.16" rpy="0 0 0" />
    </xacro:thruster_macro>s
    <!-- TODO -->
    <gazebo>
      <!-- USV Gazebo Thrust plugin -->
        <plugin name="$(arg namespace)_thruster_model" filename="libusv_gazebo_thrust_plugin.so">
        <!-- General plugin parameters -->
        <robotNamespace>$(arg namespace)"</robotNamespace>
        <cmdTimeout>1.0</cmdTimeout>
        <publisherRate>100.0></publisherRate>

        <!-- Two thrusters -->
        <thruster>
          <linkName>$(arg suffix_ns)thruster_0</linkName>
          <!-- TODO -->
          <!-- propJointName dummy/empty since heron uses jets -->
          <propJointName>$(arg suffix_ns)thruster_0_joint</propJointName>
          <!-- engineJointName dummy/empty since heron uses jets -->
          <engineJointName>$(arg suffix_ns)thruster_0_joint</engineJointName>
          <cmdTopic>"$(arg suffix_ns)/thruster_0/input"</cmdTopic>
          <!-- angleTopic empty since heron uses jets -->
          <angleTopic></angleTopic>
          <!-- enableAngle false since heron uses jets -->
          <enableAngle>false</enableAngle>
          <mappingType>1</mappingType>
          <maxCmd>100</maxCmd>
          <maxForceFwd>35</maxForceFwd>
          <maxForceRev>-35</maxForceRev>
          <!-- maxAngle of 0 since heron uses jets -->
          <maxAngle>0</maxAngle>
        </thruster>
        <thruster>
          <linkName>$(arg suffix_ns)thruster_1</linkName>
          <!-- TODO -->
          <!-- propJointName dummy/empty since heron uses jets -->
          <propJointName>$(arg suffix_ns)thruster_1_joint</propJointName>
          <!-- engineJointName dummy/empty since heron uses jets -->
          <engineJointName>$(arg suffix_ns)thruster_1_joint</engineJointName>
          <cmdTopic>"$(arg suffix_ns)/thruster_1/input"</cmdTopic>
          <!-- angleTopic empty since heron uses jets -->
          <angleTopic></angleTopic>
          <!-- enableAngle false since heron uses jets -->
          <enableAngle>false</enableAngle>
          <mappingType>1</mappingType>
          <maxCmd>100</maxCmd>
          <maxForceFwd>35</maxForceFwd>
          <maxForceRev>-35</maxForceRev>
          <!-- maxAngle of 0 since heron uses jets -->
          <maxAngle>0</maxAngle>
        </thruster>


        <!-- Name of the joint between thruster and vehicle base link -->
        <!--jointName>${suffix_ns}thruster_${thruster_id}_joint</jointName-->

        <!-- FIXME: skip for now -->
        <!-- Minimum allowed value for the input signal for thruster unit -->
        <clampMin>-100</clampMin>

        <!-- FIXME: skip for now -->
        <!-- 2) First order model -->
        <dynamics>
          <type>FirstOrder</type>
          <timeConstant>0.05</timeConstant>
        </dynamics>

        <!-- FIXME: skip for now -->
        <!-- 3) Linear interpolation
        If you have access to the thruster's data sheet, for example,
        you can enter samples of the curve's input and output values
        and the thruster output will be found through linear interpolation
        of the given samples.
        -->
        <conversion>
          <type>LinearInterp</type>
          <inputValues>-1.0 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1.0</inputValues>
          <outputValues>-19.88 -16.52 -12.6 -5.6 -1.4 0.0 2.24 9.52 21.28 28.0 33.6</outputValues>
        </conversion>

      </plugin>
    </gazebo>

    <!-- Include the sensor modules -->
    <xacro:include filename="$(find heron_description)/urdf/sensors.xacro"/>


    <xacro:panel namespace="$(arg suffix_ns)" side="left" location="1" />
    <xacro:panel namespace="$(arg suffix_ns)" side="right" location="-1" />

    <xacro:include filename="$(find heron_description)/urdf/accessories.urdf.xacro" />

    <!-- Optional custom includes. -->
    <xacro:include filename="$(optenv HERON_URDF_EXTRAS empty.urdf)" />

  </xacro:macro>

</robot>
